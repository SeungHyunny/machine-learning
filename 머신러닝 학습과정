# 0. 사용할 패키지 불러오기
import tensorflow as tf
from keras.utils import np_utils
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Activation
import numpy as np

np.random.seed(3) #임의의 값으로 시드값을 정함 : 실행시 항상 같은 랜덤 값이 출력되게 하기 위해

# 1. 데이터 셋 생성하기
# 훈련셋과 시험셋 불러오기
(x_train, y_train),(x_test, y_test) = mnist.load_data()

# 2. 훈련셋과 검증셋을 분리
# 검증셋
x_val = x_train[50000:]
y_val = y_train[50000:]
# 훈련셋
x_train = x_train[:50000]
y_train = y_train[:50000]

# 데이터셋의 전처리
# 하나의 글자가 가로, 세로 28px로 구성되어 있음
# 28*28 = 784
x_train = x_train.reshape(50000,784).astype('float32')/255.0 
x_val = x_val.reshape(10000,784).astype('float32')/255.0 
x_test = x_test.reshape(10000,784).astype('float32')/255.0 

#훈련셋과 검증셋 고르기
train_rand_idxs = np.random.choice(50000,700)
val_rand_idxs = np.random.choice(10000,300)
x_train = x_train[train_rand_idxs]
y_train = y_train[train_rand_idxs]
x_val = x_val[val_rand_idxs]
y_val = y_val[val_rand_idxs]

#라벨데이터 원한잇코딩(ont-hot encoddion) 처리
y_train = np_utils.to_categorical(y_train)
y_val = np_utils.to_categorical(y_val)
y_test = np_utils.to_categorical(y_test)

############################################################
# 2. 모델 구성하기
# relu : 알고리즘
model = Sequential()
model.add(Dense(units=2,input_dim=28*28,activation='relu'))
model.add(Dense(units=10,activation='softmax'))

# 3. 모델 학습과정 설정하기
model.compile(loss='categorical_crossentropy',optimizer='sgd',metrics=['accuracy'])

# 4. 모델 학습시키기
hist = model.fit(x_train, y_train, epochs=1000,batch_size=10,validation_data=(x_val,y_val))

# 5. 학습과정 살펴보기
%matplotlib inline
import matplotlib.pyplot as plt

fig, loss_ax = plt.subplots()
acc_ax = loss_ax.twinx()

loss_ax.plot(hist.history['loss'],'y',label='train loss') # 매 애포크마다의 훈련 손실값
loss_ax.plot(hist.history['val_loss'],'r',label='val loss') # 검증 손실값
acc_ax.plot(hist.history['accuracy'],'b',label='train acc') # 훈련 정확도
acc_ax.plot(hist.history['val_accuracy'],'g',label='val acc') # 검증 정확도

loss_ax.set_xlabel('epoch')
loss_ax.set_ylabel('loss')
acc_ax.set_ylabel('accuracy')

loss_ax.legend(loc='upper left')
acc_ax.legend(loc='lower left')

plt.show()
